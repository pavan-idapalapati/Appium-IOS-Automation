{
  "stats": {
    "suites": 1,
    "tests": 18,
    "passes": 17,
    "pending": 0,
    "failures": 1,
    "start": "2019-04-02T14:18:00.537Z",
    "end": "2019-04-02T14:24:08.706Z",
    "duration": 368169,
    "testsRegistered": 18,
    "passPercent": 94.4,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c1e9b61a-70ef-45eb-ab66-ed01a3a3bcfd",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "737b4771-15af-4fca-8ab0-ee1bebfdebe8",
        "title": "Testing Duke UI functionalities",
        "fullFile": "/Users/divami/Documents/Duke.Ai - Appium/DUKE-APM/Tests/testCases.js",
        "file": "/Tests/testCases.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Testing Duke UI functionalities \"before all\" hook",
            "timedOut": false,
            "duration": 82657,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// Connect to Appium server\ndriver = await wd.promiseChainRemote(config.serverConfig);\nthis.timeout(1200000);\n// Start the session\nawait driver.init({\n\t...config.iosCaps\n});",
            "err": {},
            "isRoot": false,
            "uuid": "c238220d-d46f-4cca-947c-659ae77bddb5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing Duke UI functionalities \"after all\" hook",
            "timedOut": false,
            "duration": 492,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "await driver.quit();",
            "err": {},
            "isRoot": false,
            "uuid": "d380a33e-fd1b-4394-aa81-0f4a7e5cfd6f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "To verify the look and feel of the Register screen ",
            "fullTitle": "Testing Duke UI functionalities To verify the look and feel of the Register screen ",
            "timedOut": false,
            "duration": 1170,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "await driver.setImplicitWaitTimeout(10000);\nthis.timeout(3000000)\n//Accept Popup\nawait driver.execute('mobile:alert', { action: 'accept' });\n// UI Elements config for registeration page\nfor (let i = 0; i < registrationElements.length; i++) {\n\tlet element = registrationElements[i];\n\tutils.elementByAccessibilityId(driver, element.name)\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ed56a4f0-2d02-496a-b726-8f73642b13df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check for all the fields and their placeholders in the register screen.",
            "fullTitle": "Testing Duke UI functionalities Check for all the fields and their placeholders in the register screen.",
            "timedOut": false,
            "duration": 4554,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\nawait driver.setImplicitWaitTimeout(1000);\nfor (let i = 0; i < registrationElements.length; i++) {\n\tlet element = registrationElements[i];\n\tif (element.type === \"textfield\") {\n\t\t//Element exists\n\t\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\t\tlet placeholder = await ele.text();\n\t\tassert.equal(placeholder, element.placeholder);\n\t} else if (element.type === \"button\") {\n\t\tutils.elementByAccessibilityId(driver, element.name);\n\t}\n}",
            "err": {},
            "isRoot": false,
            "uuid": "4a5e3955-b093-4fcf-a9a8-b1f2a889a8dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify error messages are displayed for all the fields when are left blank and submit button is clicked by user",
            "fullTitle": "Testing Duke UI functionalities To verify error messages are displayed for all the fields when are left blank and submit button is clicked by user",
            "timedOut": false,
            "duration": 2491,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\t//Send Verification Code button exists\n\t\tlet sendVerificationCodeButton = await utils.elementByAccessibilityId(driver, \"signup_submit\");\n\t\tawait sendVerificationCodeButton.click();\n\t\t// await driver.setImplicitWaitTimeout(1000);\n\t\tlet errorMessageElement = await driver.element(\"name\", \"Password should be minimum 8 characters.\");\n\t\tconst errorMessage = await errorMessageElement.text();\n\t\tassert.equal(errorMessage, `Password should be minimum 8 characters.`);\n\t\t// await driver.setImplicitWaitTimeout(1000);\n\t\t// Close the popup\n\t\tlet close = await utils.elementByAccessibilityId(driver, \"OK\");\n\t\tawait close.click();",
            "err": {},
            "isRoot": false,
            "uuid": "eb5fbc2d-a5b7-4d16-8ff9-c9daf9b541c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify error message when user tries to register with already registered email id ",
            "fullTitle": "Testing Duke UI functionalities To verify error message when user tries to register with already registered email id ",
            "timedOut": false,
            "duration": 13308,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\tfor (let i = 0; i < registrationElements.length; i++) {\n\t\t\tlet el = registrationElements[i];\n\t\t\tif (el.type == \"textfield\") {\n\t\t\t\tlet element = await driver.waitForElementByAccessibilityId(el.name);\n\t\t\t\tawait element.clear();\n\t\t\t\tawait element.sendKeys(el.value);\n\t\t\t}\n\t\t}\n\t\tlet sendVerificationCodeButton = await driver.waitForElementByAccessibilityId(\"signup_submit\");\n\t\tawait sendVerificationCodeButton.click();\n\t\tlet alertTitleElement = await driver.element(\"name\", \"Error!\");\n\t\tlet alertTitle = await alertTitleElement.text();\n\t\tawait assert.equal(alertTitle, `Error!`);\n\t\tlet alertMessageElement = await driver.element(\"name\", \"User already exists. Would you like to reset your password?\");\n\t\tlet alertMessage = await alertMessageElement.text();\n\t\tawait assert.equal(alertMessage, `User already exists. Would you like to reset your password?`);\n\t\tlet close = await driver.waitForElementByAccessibilityId(\"Cancel\");\n\t\tawait close.click();",
            "err": {},
            "isRoot": false,
            "uuid": "61287c6c-be20-44cc-acf4-a58e7dcb4f76",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should move to registraion page second step and enter dummy verification code  and show error popup and should come back to registration page",
            "fullTitle": "Testing Duke UI functionalities it should move to registraion page second step and enter dummy verification code  and show error popup and should come back to registration page",
            "timedOut": false,
            "duration": 22428,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\tfor (let i = 0; i < registrationElements.length; i++) {\n\t\t\tlet el = registrationElements[i];\n\t\t\tif (el.type == \"textfield\") {\n\t\t\t\t// console.log(el, \"element@\");\n\t\t\t\tlet element = await driver.waitForElementByAccessibilityId(el.name);\n\t\t\t\tawait element.clear();\n\t\t\t\tawait element.sendKeys(el.nonRegisteredValue);\n\t\t\t}\n\t\t}\n\t\tlet sendVerificationCodeButton = await driver.waitForElementByAccessibilityId(\"signup_submit\");\n\t\tawait sendVerificationCodeButton.click();\n\t\tlet el1 = await utils.elementByAccessibilityId(driver, \"verificationcode\");\n\t\tawait el1.sendKeys(config.constants.registrationVerificationCode);\n\t\tlet el2 = await utils.elementByAccessibilityId(driver, \"verify\");\n\t\tawait el2.click();\n\t\tlet el3 = await utils.elementByAccessibilityId(driver, \"Please enter the correct verification code.\");\n\t\tawait el3.click();\n\t\tlet el4 = await utils.elementByAccessibilityId(driver, \"OK\");\n\t\tawait el4.click();\n\t\tlet el5 = await utils.elementByAccessibilityId(driver, \"back\");\n\t\tawait el5.click();",
            "err": {},
            "isRoot": false,
            "uuid": "e4c29a13-6ac9-4abf-808d-6ad7ceb093c9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify error message is displayed when user tries to login non registered email id.",
            "fullTitle": "Testing Duke UI functionalities To verify error message is displayed when user tries to login non registered email id.",
            "timedOut": false,
            "duration": 8585,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\t//Click on login\n\t\tlet login = await utils.elementByAccessibilityId(driver, \"login\");\n\t\tawait login.click();\n\t\t// entering email and password\n\t\tfor (let i = 0; i < loginElements.length; i++) {\n\t\t\tlet element = loginElements[i];\n\t\t\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\t\t\tlet placeholder = await ele.text();\n\t\t\tawait assert.equal(placeholder, element.placeholder);\n\t\t\tawait ele.sendKeys(element.nonRegisteredValue);\n\t\t}\n\t\t//Click Login\n\t\tlet loginButton = await driver.waitForElementByAccessibilityId(\"submit\");\n\t\tawait loginButton.click();\n\t\tlet alertTitleElement = await driver.element(\"name\", \"Error!\");\n\t\tlet alertTitle = await alertTitleElement.text();\n\t\tawait assert.equal(alertTitle, `Error!`);\n\t\tlet alertMessageElement = await driver.element(\"name\", \"User does not exist.\");\n\t\tlet alertMessage = await alertMessageElement.text();\n\t\tawait assert.equal(alertMessage, `User does not exist.`);\n\t\tlet close = await driver.waitForElementByAccessibilityId(\"OK\");\n\t\tawait close.click();",
            "err": {},
            "isRoot": false,
            "uuid": "52a6f880-0c73-4134-88bc-f17e85103d38",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify error pop up is displayed when user enters wrong mail id or password and clicks on login button.",
            "fullTitle": "Testing Duke UI functionalities To verify error pop up is displayed when user enters wrong mail id or password and clicks on login button.",
            "timedOut": false,
            "duration": 11520,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\tfor (let i = 0; i < loginElements.length; i++) {\n\t\t\tlet element = loginElements[i];\n\t\t\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\t\t\tawait ele.clear();\n\t\t\tawait ele.sendKeys(element.invalidValue);\n\t\t}\n\t\t//Click Login\n\t\tlet loginButton = await utils.elementByAccessibilityId(driver, \"submit\");\n\t\tawait loginButton.click();\n\t\tlet alertTitleElement = await driver.element(\"name\", \"Error!\");\n\t\tlet alertTitle = await alertTitleElement.text();\n\t\tawait assert.equal(alertTitle, `Error!`);\n\t\tlet alertMessageElement = await driver.element(\"name\", \"Incorrect username or password.\");\n\t\tlet alertMessage = await alertMessageElement.text();\n\t\tawait assert.equal(alertMessage, `Incorrect username or password.`);\n\t\tlet close = await utils.elementByAccessibilityId(driver, \"OK\");\n\t\tawait close.click();",
            "err": {},
            "isRoot": false,
            "uuid": "eaa63dee-710d-4165-b237-62638a750d1a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Test  for email Field Visibility",
            "fullTitle": "Testing Duke UI functionalities Test  for email Field Visibility",
            "timedOut": false,
            "duration": 4977,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(30000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\tawait driver.setPageLoadTimeout(10000);\n\t\t//Click on Forgot Password\n\t\tlet forgotPwd = await driver.waitForElementByAccessibilityId(\"forgotPassword\");\n\t\tawait forgotPwd.click();\n\t\tlet email;\n\t\t// console.log(\"before get the email element\");\n\t\temail = await utils.elementByAccessibilityId(driver, \"email\");\n\t\t// console.log(\"After email element\", email);\n\t\t// await email.click();\n\t\ttry {\n\t\t\tawait email.sendKeys(\"someone1@duke.com\")\n\t\t} catch (e) {\n\t\t\t// console.log(e);\n\t\t}\n\t\t// console.log(\"After sending keys\");\n\t\tawait email.clear();",
            "err": {},
            "isRoot": false,
            "uuid": "69f0b0fa-e22e-4fd3-bf46-2c6cc7d0030e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Navigate to Forgot Password, enter unregistered email.",
            "fullTitle": "Testing Duke UI functionalities Navigate to Forgot Password, enter unregistered email.",
            "timedOut": false,
            "duration": 4626,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(30000)\n\t\tawait driver.setImplicitWaitTimeout(100000);\n\t\tlet email = await utils.elementByAccessibilityId(driver, \"email\");\n\t\t// console.log(\"emal2\", email);\n\t\tawait email.sendKeys(\"abcdea@abc.com\");\n\t\t//Click Login\n\t\tlet sendVerificationButton = await utils.elementByAccessibilityId(driver, \"sendVerificationCode\");\n\t\tawait sendVerificationButton.click();\n\t\t//Check alert Title\n\t\tlet alertTitleElement = await driver.element(\"name\", \"Error!\");\n\t\t// Check the text\n\t\tconst alertTitle = await alertTitleElement.text();\n\t\tawait assert.equal(alertTitle, `Error!`);\n\t\tlet alertmessageElement = await driver.element(\"name\", \"This email is not registered with us. Would you like to register?\");\n\t\t// Check the text\n\t\tconst alertmessage = await alertmessageElement.text();\n\t\tawait assert.equal(alertmessage, `This email is not registered with us. Would you like to register?`);\n\t\t//Click Close\n\t\tlet closeButton = await utils.elementByAccessibilityId(driver, \"Close\");\n\t\tawait closeButton.click();",
            "err": {},
            "isRoot": false,
            "uuid": "c94c2a10-9abd-499c-a320-7956e34f11ef",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify error message pop is displayed when user tries to reset password by entering the email id of non verified but registered ",
            "fullTitle": "Testing Duke UI functionalities To verify error message pop is displayed when user tries to reset password by entering the email id of non verified but registered ",
            "timedOut": false,
            "duration": 9192,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setPageLoadTimeout(5000);\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\t//Enter Email\n\t\tlet email = await utils.elementByAccessibilityId(driver, \"email\");\n\t\tawait email.clear();\n\t\tawait email.sendKeys(config.constants.nonVerifiedButRegisteredEmail);\n\t\t//Click send verfification code\n\t\tlet sendVerificationButton = await utils.elementByAccessibilityId(driver, \"sendVerificationCode\");\n\t\tawait sendVerificationButton.click();\n\t\t//Check alert Title\n\t\tlet alertTitleElement = await driver.element(\"name\", \"Error!\");\n\t\t// Check the text\n\t\tconst alertTitle = await alertTitleElement.text();\n\t\tawait assert.equal(alertTitle, `Error!`);\n\t\t//Alert message Element\n\t\tlet alertmessageElement = await driver.element(\"name\", \"Cannot reset password for the user as there is no registered/verified email or phone_number\");\n\t\t// Check the text\n\t\tconst alertmessage = await alertmessageElement.text();\n\t\tawait assert.equal(alertmessage, `Cannot reset password for the user as there is no registered/verified email or phone_number`);\n\t\t//Click Close\n\t\tlet ok = await utils.elementByAccessibilityId(driver, \"OK\");\n\t\tawait ok.click();\n\t\t//Click Login\n\t\tlet loginButton = await utils.elementByAccessibilityId(driver, \"REMEMBER ? GO BACK TO LOGIN\");\n\t\tawait loginButton.click();",
            "err": {},
            "isRoot": false,
            "uuid": "c47544ee-5072-48e3-8d5d-077cb5a1978d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "To verify  user is navigated to Home screen if email and password are valid",
            "fullTitle": "Testing Duke UI functionalities To verify  user is navigated to Home screen if email and password are valid",
            "timedOut": false,
            "duration": 11139,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// await driver.setPageLoadTimeout(5000);\n\t\tthis.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\t// entering username and password\n\t\tfor (let i = 0; i < loginElements.length; i++) {\n\t\t\tlet element = loginElements[i];\n\t\t\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\t\t\tawait ele.clear();\n\t\t\tawait ele.sendKeys(element.registeredValue);\n\t\t}\n\t\t//Click Login\n\t\tlet loginButton = await utils.elementByAccessibilityId(driver, \"submit\");\n\t\tawait loginButton.click();\n\t\t// await driver.setPageLoadTimeout(5000);\n\t\t//wait for element to appear\n\t\tlet uploadDocument = await utils.elementByAccessibilityId(driver, \"uploadDocument\");",
            "err": {},
            "isRoot": false,
            "uuid": "cb4dd071-d8f0-4ed6-82cf-8c134d945327",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should check the change phone number functionality",
            "fullTitle": "Testing Duke UI functionalities it should check the change phone number functionality",
            "timedOut": false,
            "duration": 42107,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "await driver.setPageLoadTimeout(10000);\nthis.timeout(3000000)\nawait driver.setImplicitWaitTimeout(100000);\n\nlet profile = await utils.elementByAccessibilityId(driver, \"profile\");\nawait profile.click();\n\nlet el1 = await utils.elementByAccessibilityId(driver, \"change-phonenumber\");\nawait el1.click();\nlet el2 = await utils.elementByAccessibilityId(driver, \"password\");\nawait el2.sendKeys(\"Divami@4\");\nlet el3 = await utils.elementByAccessibilityId(driver, \"done\");\nawait el3.click();\nlet el4 = await utils.elementByAccessibilityId(driver, \"phone_number\");\nawait el4.clear();\nawait el4.sendKeys(\"+7731834175\");\nlet el5 = await utils.elementByAccessibilityId(driver, \"done\");\nawait el5.click();\n// let el6 = await driver.elementByXPath(\"//XCUIElementTypeStaticText[@name=\\\"Success!\\\"]\");\n\n// await el6.click();\nlet alertTitleElement = await driver.element(\"name\", \"Success!\");\nlet alertTitle = await alertTitleElement.text();\nawait assert.equal(alertTitle, `Success!`);\n\nlet msg = await driver.element(\"name\", \"Your phone number has changed successfully.\");\nlet msgText = await msg.text();\nawait assert.equal(msgText, `Your phone number has changed successfully.`)\nlet el8 = await driver.elementByAccessibilityId(\"OK\");\nawait el8.click();",
            "err": {},
            "isRoot": false,
            "uuid": "f23b67d7-4267-4ded-8117-978e6a9529b1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should show error popup when user trying to enter to change the password  using wrong old password",
            "fullTitle": "Testing Duke UI functionalities it should show error popup when user trying to enter to change the password  using wrong old password",
            "timedOut": false,
            "duration": 10049,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\n\t\tawait driver.setImplicitWaitTimeout(10000);\n\t\tlet el2 = await utils.elementByAccessibilityId(driver, \"change-password\");\n\t\tawait el2.click();\n\t\tlet el3 = await utils.elementByAccessibilityId(driver, \"oldPassword\");\n\t\tawait el3.sendKeys(\"WrongPassword@123\");\n\t\tlet el4 = await utils.elementByAccessibilityId(driver, \"newPassword\");\n\t\tawait el4.sendKeys(\"WrongPassword@123\");\n\t\tlet el5 = await utils.elementByAccessibilityId(driver, \"done\");\n\t\tawait el5.click();\n\t\tlet el6 = await utils.elementByAccessibilityId(driver, \"Incorrect username or password.\");\n\t\tawait el6.click();\n\t\tlet el7 = await utils.elementByAccessibilityId(driver, \"OK\");\n\t\tawait el7.click();",
            "err": {},
            "isRoot": false,
            "uuid": "84f60fff-f5e3-44c3-ad7d-34c3f785031d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should give success  message, when user trying to change the password with correct login information",
            "fullTitle": "Testing Duke UI functionalities it should give success  message, when user trying to change the password with correct login information",
            "timedOut": false,
            "duration": 10259,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "this.timeout(3000000)\nawait driver.setImplicitWaitTimeout(10000);\nlet el1 = await utils.elementByAccessibilityId(driver, \"oldPassword\");\nawait el1.sendKeys(config.registeredLoginDetails.password);\nlet el2 = await utils.elementByAccessibilityId(driver, \"newPassword\");\nawait el2.sendKeys(config.constants.futurePassword);\nlet el3 = await utils.elementByAccessibilityId(driver, \"done\");\nawait el3.click();\nlet el4 = await driver.element(\"name\", \"Success!\");\nlet text = await el4.text();\nawait assert.equal(text, 'Success!')\nlet el5 = await driver.element(\"name\", \"Your password has changed successfully, Please relogin.\");\ntext = await el5.text();\nawait assert.equal(text, 'Your password has changed successfully, Please relogin.')\nlet el6 = await utils.elementByAccessibilityId(driver, \"OK\");\nawait el6.click();\nlet el7 = await utils.elementByAccessibilityId(driver, \"LOGIN\");\nawait el7.click();",
            "err": {},
            "isRoot": false,
            "uuid": "1d12486e-26bf-41d3-9e19-9c98eb32ee54",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should check logout functionality",
            "fullTitle": "Testing Duke UI functionalities it should check logout functionality",
            "timedOut": false,
            "duration": 20768,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "//Click on login\nawait driver.setPageLoadTimeout(5000);\nthis.timeout(3000000)\nawait driver.setImplicitWaitTimeout(10000);\n\nlet login = await utils.elementByAccessibilityId(driver, \"login\");\nawait login.click();\n// entering email and password\nfor (let i = 0; i < loginElements.length; i++) {\n\tlet element = loginElements[i];\n\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\tlet placeholder = await ele.text();\n\tawait assert.equal(placeholder, element.placeholder);\n\tlet value;\n\tif (element.placeholder == 'Password') {\n\t\tvalue = config.constants.futurePassword;\n\t} else {\n\t\tvalue = element.registeredValue\n\t}\n\tawait ele.sendKeys(value);\n}\n//Click Login\nlet loginButton = await utils.elementByAccessibilityId(driver, \"submit\");\nawait loginButton.click();\nawait driver.setPageLoadTimeout(5000);\nlet el1 = await utils.elementByAccessibilityId(driver, \"profile\");\nawait el1.click();\nlet el2 = await driver.elementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[2]/XCUIElementTypeTable/XCUIElementTypeCell[5]/XCUIElementTypeButton\");\nawait el2.click();\nlet el3 = await driver.elementByAccessibilityId(\"LOGIN\");\nawait el3.click();",
            "err": {
              "message": "Error: [elementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[2]/XCUIElementTypeTable/XCUIElementTypeCell[5]/XCUIElementTypeButton\")] Error response status: 7, , NoSuchElement - An element could not be located on the page using the given search parameters. Selenium error: An element could not be located on the page using the given search parameters.",
              "estack": "Error: [elementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[2]/XCUIElementTypeTable/XCUIElementTypeCell[5]/XCUIElementTypeButton\")] Error response status: 7, , NoSuchElement - An element could not be located on the page using the given search parameters. Selenium error: An element could not be located on the page using the given search parameters.\n    at exports.newError (node_modules/wd/lib/utils.js:151:13)\n    at /Users/divami/Documents/Duke.Ai - Appium/DUKE-APM/node_modules/wd/lib/callbacks.js:94:19\n    at /Users/divami/Documents/Duke.Ai - Appium/DUKE-APM/node_modules/wd/lib/webdriver.js:183:5\n    at Request._callback (node_modules/wd/lib/http-utils.js:89:7)\n    at Request.self.callback (node_modules/request/request.js:185:22)\n    at Request.<anonymous> (node_modules/request/request.js:1161:10)\n    at IncomingMessage.<anonymous> (node_modules/request/request.js:1083:12)\n    at endReadableNT (_stream_readable.js:1132:12)\n    at processTicksAndRejections (internal/process/next_tick.js:76:17)"
            },
            "isRoot": false,
            "uuid": "56fbc294-c6c0-445b-a849-ee0fde77220d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Should upload Doc",
            "fullTitle": "Testing Duke UI functionalities Should upload Doc",
            "timedOut": false,
            "duration": 80353,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "await driver.setPageLoadTimeout(5000);\nthis.timeout(3000000)\nawait driver.setImplicitWaitTimeout(20000);\nfor (let i = 0; i < loginElements.length; i++) {\n\tlet element = loginElements[i];\n\tlet ele = await utils.elementByAccessibilityId(driver, element.name);\n\tlet placeholder = await ele.text();\n\tawait assert.equal(placeholder, element.placeholder);\n\tlet value;\n\tif (element.placeholder == 'Password') {\n\t\tvalue = config.constants.futurePassword;\n\t} else {\n\t\tvalue = element.registeredValue\n\t}\n\tawait ele.sendKeys(value);\n}\nlet loginButton = await utils.elementByAccessibilityId(driver, \"submit\");\nawait loginButton.click();\nawait driver.setPageLoadTimeout(5000);\n//wait for element to appear\nlet uploadDocument = await utils.elementByAccessibilityId(driver, \"uploadDocument\");\nawait uploadDocument.click();\nawait driver.setPageLoadTimeout(5000);\n\nlet gallery;\ntry {\n\tgallery = await utils.elementByAccessibilityId(driver, \"Gallery\");\n} catch (err) {\n\tawait uploadDocument.click();\n\tgallery = await utils.elementByAccessibilityId(driver, \"Gallery\");\n} finally {\n\tawait gallery.click();\n}\nlet imagesElement = await utils.elementByAccessibilityId(driver, \"Camera Roll\");\nawait imagesElement.click();\nlet imageCell = await utils.elementByAccessibilityId(driver, config.constants.documentName);\nawait imageCell.click();\nlet submit = await utils.elementByAccessibilityId(driver, \"submit\");\nawait submit.click();\nlet imageElement = await driver.waitForElementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeImage\", 2000);\nawait imageElement.click();\noriginalImage = await driver.takeScreenshot();\nlet upload = await utils.elementByAccessibilityId(driver, \"upload\");\nawait driver.setImplicitWaitTimeout(500000);\nawait upload.click();\nawait driver.setPageLoadTimeout(5000);\nlet nextPageTitle = await driver.element(\"name\", \"title\");",
            "err": {},
            "isRoot": false,
            "uuid": "ac1ea97b-ccc9-4e01-94e4-94c41e87a8e0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Checking document upload status",
            "fullTitle": "Testing Duke UI functionalities Checking document upload status",
            "timedOut": false,
            "duration": 6829,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "await driver.setPageLoadTimeout(5000);\nthis.timeout(3000000)\nawait driver.setImplicitWaitTimeout(10000);\nlet nextPageTitle = await driver.element(\"name\", \"title\");\n// Check the text\nconst vcTitle = await nextPageTitle.text();\nawait driver.setPageLoadTimeout(2000);\nlet addAnother = await utils.elementByAccessibilityId(driver, \"addAnother\");\nawait addAnother.click();\nawait driver.setPageLoadTimeout(2000);\nlet gallery;\ntry {\n\tgallery = await utils.elementByAccessibilityId(driver, \"Gallery\");\n} catch (err) {\n\tgallery = await utils.elementByAccessibilityId(driver, \"Gallery\");\n} finally {\n\tlet cancel = await utils.elementByAccessibilityId(driver, \"Cancel\");\n\tawait cancel.click();\n\tlet el3 = await utils.elementByAccessibilityId(driver, \"goBackHome\");\n\tawait el3.click();\n}\nlet el4 = await utils.elementByAccessibilityId(driver, \"HOME\");",
            "err": {},
            "isRoot": false,
            "uuid": "eb41d44b-e9ca-43f1-b3ed-506d80e2dc69",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "it should check image comparision functionality",
            "fullTitle": "Testing Duke UI functionalities it should check image comparision functionality",
            "timedOut": false,
            "duration": 20620,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//Click on login\nawait driver.setPageLoadTimeout(5000);\nthis.timeout(3000000)\nawait driver.setImplicitWaitTimeout(10000);\n\nlet el9 = await utils.elementByAccessibilityId(driver, \"viewDocument\");\nawait el9.click();\nlet el10 = await utils.elementByAccessibilityId(driver, \"inProcess\");\nawait driver.setPageLoadTimeout(5000);\nawait el10.click();\nlet el11 = await driver.elementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[1]/XCUIElementTypeOther/XCUIElementTypeOther[2]/XCUIElementTypeCollectionView/XCUIElementTypeCell[1]/XCUIElementTypeOther/XCUIElementTypeOther\");\nawait el11.click();\n\nlet uImage = await driver.waitForElementByXPath(\"//XCUIElementTypeApplication[@name=\\\"DUKE\\\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeCollectionView/XCUIElementTypeCell/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeImage/XCUIElementTypeImage\");\nawait uImage.click();\nuploadedImage = await driver.takeScreenshot();\nlet diff = await imageCompare.getDiff(originalImage, uploadedImage);\nconsole.log(diff);\nif (diff.misMatchPercentage > 60) {\n\tassert.fail(\"image mismached\")\n}",
            "err": {},
            "isRoot": false,
            "uuid": "68181680-93ce-48ae-b1ca-069cac760264",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ed56a4f0-2d02-496a-b726-8f73642b13df",
          "4a5e3955-b093-4fcf-a9a8-b1f2a889a8dc",
          "eb5fbc2d-a5b7-4d16-8ff9-c9daf9b541c6",
          "61287c6c-be20-44cc-acf4-a58e7dcb4f76",
          "e4c29a13-6ac9-4abf-808d-6ad7ceb093c9",
          "52a6f880-0c73-4134-88bc-f17e85103d38",
          "eaa63dee-710d-4165-b237-62638a750d1a",
          "69f0b0fa-e22e-4fd3-bf46-2c6cc7d0030e",
          "c94c2a10-9abd-499c-a320-7956e34f11ef",
          "c47544ee-5072-48e3-8d5d-077cb5a1978d",
          "cb4dd071-d8f0-4ed6-82cf-8c134d945327",
          "f23b67d7-4267-4ded-8117-978e6a9529b1",
          "84f60fff-f5e3-44c3-ad7d-34c3f785031d",
          "1d12486e-26bf-41d3-9e19-9c98eb32ee54",
          "ac1ea97b-ccc9-4e01-94e4-94c41e87a8e0",
          "eb41d44b-e9ca-43f1-b3ed-506d80e2dc69",
          "68181680-93ce-48ae-b1ca-069cac760264"
        ],
        "failures": [
          "56fbc294-c6c0-445b-a849-ee0fde77220d"
        ],
        "pending": [],
        "skipped": [],
        "duration": 284975,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}